// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Product.Persistence.Context;

namespace OnlineShop.Product.Persistence.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20211207165651_MakeParentCategoryIdNullable")]
    partial class MakeParentCategoryIdNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnName("parent_category_id")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoId")
                        .HasColumnName("photo_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("ParentCategoryId")
                        .HasName("ix_categories_parent_category_id");

                    b.HasIndex("PhotoId")
                        .IsUnique()
                        .HasName("ix_categories_photo_id")
                        .HasFilter("[photo_id] IS NOT NULL");

                    b.ToTable("category");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Favorite", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "UserId")
                        .HasName("pk_favorite");

                    b.ToTable("favorite");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("meta_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_metas");

                    b.HasIndex("ProductId")
                        .HasName("ix_metas_product_id");

                    b.ToTable("meta");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("photo_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("File")
                        .HasColumnName("file")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Size")
                        .HasColumnName("size")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("pk_photos");

                    b.ToTable("photo");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<float?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnName("published_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<string>("Sku")
                        .HasColumnName("sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasName("ix_products_category_id");

                    b.ToTable("product");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId1")
                        .HasColumnName("category_id1")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "CategoryId")
                        .HasName("pk_product_category");

                    b.HasIndex("CategoryId")
                        .HasName("ix_product_categories_category_id");

                    b.HasIndex("CategoryId1")
                        .HasName("ix_product_category_category_id1");

                    b.ToTable("product_category");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .HasColumnName("photo_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("PhotoId")
                        .HasName("pk_product_photo");

                    b.HasIndex("ProductId")
                        .HasName("ix_product_photos_product_id");

                    b.ToTable("product_photo");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnName("tag_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "TagId")
                        .HasName("pk_product_tag");

                    b.HasIndex("TagId")
                        .HasName("ix_product_tags_tag_id");

                    b.ToTable("product_tag");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("review_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Cons")
                        .IsRequired()
                        .HasColumnName("cons")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnName("grade")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id")
                        .HasColumnType("int");

                    b.Property<string>("Pros")
                        .IsRequired()
                        .HasColumnName("pros")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("ProductId")
                        .HasName("ix_reviews_product_id");

                    b.ToTable("review");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ReviewRating", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnName("review_id")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Opinion")
                        .HasColumnName("opinion")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewId1")
                        .HasColumnName("review_id1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId", "UserId")
                        .HasName("pk_review_rating");

                    b.HasIndex("ReviewId1")
                        .HasName("ix_review_rating_review_id1");

                    b.ToTable("review_rating");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tag_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Category", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("fk_categories_categories_parent_category_id")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("OnlineShop.Product.Persistence.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("OnlineShop.Product.Persistence.Entities.Category", "PhotoId")
                        .HasConstraintName("fk_categories_photos_photo_id")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Favorite", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_favorites_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Meta", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_metas_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Product", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_products_categories_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ProductCategory", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_product_categories_categories_category_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OnlineShop.Product.Persistence.Entities.Category", null)
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId1")
                        .HasConstraintName("fk_product_category_category_category_id1");

                    b.HasOne("OnlineShop.Product.Persistence.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_categories_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ProductPhoto", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Photo", "Photo")
                        .WithOne()
                        .HasForeignKey("OnlineShop.Product.Persistence.Entities.ProductPhoto", "PhotoId")
                        .HasConstraintName("fk_product_photos_photos_photo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Product.Persistence.Entities.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_photos_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ProductTag", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_tags_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Product.Persistence.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("fk_product_tags_tags_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.Review", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_reviews_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShop.Product.Persistence.Entities.ReviewRating", b =>
                {
                    b.HasOne("OnlineShop.Product.Persistence.Entities.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .HasConstraintName("fk_review_ratings_reviews_review_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShop.Product.Persistence.Entities.Review", null)
                        .WithMany("ReviewRatings")
                        .HasForeignKey("ReviewId1")
                        .HasConstraintName("fk_review_rating_review_review_id1");
                });
#pragma warning restore 612, 618
        }
    }
}
